gse <- getGEO("GSE82073")
gpl <- gse$GSE82073_series_matrix.txt.gz
gpl
exprs(gpl)
counts
base <- "~/Desktop/Innes_GSE82073/"
files <- list.files(base, full.names = T)
names(files) <- sub(".+/(GSM[0-9]+)_.+$", "\\1", files)
for (i in seq_along(files)) {
file <- files[[i]]
data <- read.delim(file)
colnames(data)[3] <- names(files)[i]
if (i == 1) {
counts <- data
} else {
counts <- merge(counts, data, by = c("ENTREZID", "GENELENGTH"))
}
}
rownames(counts) <- counts[,1]
counts <- counts[,-c(1,2)]
base <- "~/Desktop/Innes_GSE82073/"
files <- list.files(base, full.names = T)
names(files) <- sub(".+/(GSM[0-9]+)_.+$", "\\1", files)
files
files <- list.files(base, pattern=".tsv", full.names = T)
names(files) <- sub(".+/(GSM[0-9]+)_.+$", "\\1", files)
files
for (i in seq_along(files)) {
file <- files[[i]]
data <- read.delim(file)
colnames(data)[3] <- names(files)[i]
if (i == 1) {
counts <- data
} else {
counts <- merge(counts, data, by = c("ENTREZID", "GENELENGTH"))
}
}
rownames(counts) <- counts[,1]
counts <- counts[,-c(1,2)]
counts(gpl)
exprs(gpl)
exprs(gpl) <- counts
?assayData()
assayData(gpl)
count_data <- read.delim(input$counts_file$datapath, row.names = 1)
counts
str(counts)
counts <- as.matrix(counts)
str(cunts)
str(counts)
assayData(gpl)
assayData(gpl) <- counts
?assayData
dim(assayData(gpl))
dim(counts(gpl))
dim(exprs(gpl))
exprs(gpl, matrix) <- counts
?exprs
class(counts)
exprs(gpl, counts) <- counts
exprs(gpl) <- counts
pData(gpl)
dim(pData(gpl))
dim(fData(gpl))
pd <- new("AnnotatedDataFrame", data=pData(gpl))
gpl_data <- gpl
count_data <- counts
pd <- new("AnnotatedDataFrame", data=pData(gpl_data))
fd <- bitr(rownames(count_data),
fromType = "ENTREZID",
toType = c("SYMBOL","ENSEMBL","REFSEQ",
"ACCNUM","UNIPROT"),
OrgDb = org_db)
shiny::runApp()
input <- list(org <- "hs")
gs_type <- "c3"
org <- ifelse(input$org == "hm", "human", "mouse")
org
input$org
input <- list(org = "hs")
input$org
org <- ifelse(input$org == "hm", "human", "mouse")
org
org <- ifelse(input$org == "hs", "human", "mouse")
org
gene_set <- load(paste0("~/Resources/Gene_sets/msigdb_",org,"/",
org,"_",gs_type,"v5p2.rdata"))
load(paste0("~/Resources/Gene_sets/msigdb_",org,"/",
org,"_",gs_type,"_v5p2.rdata"))
Hs.c3
?load
gene_set <- load(paste0("~/Resources/Gene_sets/msigdb_",org,"/",
org,"_",gs_type,"_v5p2.rdata"))
gene_set
str(gene_set)
gene_set
eval(parse(gene_set))
eval(parse(test = gene_set))
eval(parse(text = gene_set))
type(gene_set)
typeof(gene_set)
runApp()
input$org <- "Hs"
gs_type <- "H"
gs_type <- "H"
org <- ifelse(input$org == "Hs", "human", "mouse")
gene_set <- load(paste0("~/Resources/Gene_sets/msigdb_",org,"/",
org,"_",gs_type,"_v5p2.rdata"))
summaryTable <- data.frame("Set name" = names(eval(parse(text = gene_set))),
"N genes" = lengths(eval(parse(text = gene_set))))
summaryTable
runApp()
typeof(data_set)
typeof(gene_set)
if (typeof(gene_set) == "character") {
gene_set <- eval(parse(text = gene_set))
}
gene_set
summaryTable <- data.frame("Set name" = names(gene_set),
"N genes" = lengths(gene_set))
summaryTable
runApp()
rdata_files <- list.files(path = "~/Resources/Gene_sets", pattern = "*.rdata",
recursive = T, full.names = T)
rdata_files
sapply(rdata_files, function(x) load(x))
lapply(rdata_files, load, .GlobalEnv)
runApp()
gse <- getGEO("GSE42368")
gpl_data <- gse$GSE42368_series_matrix.txt.gz
exprs_mat <- exprs(gpl_data)
rownames(exprs_mat) <- fData(gpl_data)$"GENE SYMBOL"
head(exprs_mat)
head(fData(gpl_data))
Hs.c3$AAANWWTGC_UNKNOWN
read_gmt <- function(gmt_file) {
gene_set <- scan(gmt_file, what="", sep="\n")
gene_set <- strsplit(gene_set, "\\t+")
names(gene_set) <- sapply(gene_set, `[[`, 1)
gene_set <- lapply(gene_set, `[`, -c(1,2))
gene_set <- lapply(gene_set, function(x) { unique(x) })
return(gene_set)
}
senes <- read_gmt("~/Scripts/R/GSEA/AI_gene_sets.gmt")
senes
term_to_gene <- function(gene_set_list) {
term2genes <- data.frame(term = c(rep(names(gene_set_list), lengths(gene_set_list))),
gene = unlist(gene_set_list))
}
term2gene <- term_to_gene(Hs.c3)
head(term2gene)
tail(term2gene)
colnames(pData(gpl_data))
colnames(fData(gpl_data))
runApp()
gm_ratios <- function(exprs, idx_A, idx_B) {
apply(exprs, 1, function(x) {
exp(mean(log(x[idx_A]), na.rm = T)) / exp(mean(log(x[idx_B]), na.rm = T))
})
}
moo <- exprs(gpl_data)
head(moo)
idx_A <- c(1,2)
idx_B <- c(3,4)
test <- gm_ratios(moo, idx_A, idx_B)
warnings()
head(test)
test_df <- data.frame(moo[,1:4], gm = test)
head(test_df)
head(test_df[is.na(test_df$gm),])
gm_ratios <- function(exprs, idx_A, idx_B) {
exprs <- exprs + min(exprs)
apply(exprs, 1, function(x) {
exp(mean(log(x[idx_A]), na.rm = T)) / exp(mean(log(x[idx_B]), na.rm = T))
})
}
test_df$gm <- gm_ratios(moo, idx_A, idx_B)
warnings(0)
warnings()
head(test-df)
head(test_df)
head(moo)
moo
moo[1:5,1:5]
moo2 <- moo+min(moo)
moo2[1:5,1:5]
test_df$gm <- gm_ratios(moo, idx_A, idx_B)
gm_ratios <- function(exprs, idx_A, idx_B) {
exprs <- exprs + abs(min(exprs))
apply(exprs, 1, function(x) {
exp(mean(log(x[idx_A]), na.rm = T)) / exp(mean(log(x[idx_B]), na.rm = T))
})
}
test_df$gm <- gm_ratios(moo, idx_A, idx_B)
head(test_df$gm)
head(test_df)
moo3 <- test_df
gm_ratios <- function(exprs, idx_A, idx_B) {
#exprs <- exprs + abs(min(exprs))
apply(exprs, 1, function(x) {
exp(mean(log(x[idx_A]), na.rm = T)) / exp(mean(log(x[idx_B]), na.rm = T))
})
}
test_df$gm <- gm_ratios(moo, idx_A, idx_B)
head(test_df)
head(moo3)
runApp()
exprs_mat <- exprs(gpl_data)
rownames(exprs_mat) <- fData(gpl_data)$"Entrez_Gene_ID"
gm_values <- gm_ratios(exprs_mat, numer_idx, denom_idx)
numer_idx <- c(1,2)
denom_idx <- c(3,4)
gm_values <- gm_ratios(exprs_mat, numer_idx, denom_idx)
head(gm_values)
warnings()
# function for calc ratio of geometric means
gm_ratios <- function(exprs, idx_A, idx_B) {
exprs <- exprs + abs(min(exprs))
apply(exprs, 1, function(x) {
exp(mean(log(x[idx_A]), na.rm = T)) / exp(mean(log(x[idx_B]), na.rm = T))
})
}
gm_values <- gm_ratios(exprs_mat, numer_idx, denom_idx)
gsea_res <- GSEA(gm_values, TERM2GENE = gene_sets,
minGSSize = 10, pvalueCutoff = 0.1)
gene_sets <- term_to_gene(Hs.c3)
gsea_res <- GSEA(gm_values, TERM2GENE = gene_sets,
minGSSize = 10, pvalueCutoff = 0.1)
gm_values <- gm_values[order(-gm_values)]
gsea_res <- GSEA(gm_values, TERM2GENE = gene_sets,
minGSSize = 10, pvalueCutoff = 0.1)
chosen_gene_set <- gsea_res$ID[1]
gseaplot(gsea_res, geneSetID = chosen_gene_set)
length(gm_values)
head(gsea_res)
runApp()
install.packages(c("ggvis", "heatmap3"))
shiny::runApp()
runApp()
runApp('/srv/shiny-server/sample-apps/hello')
shiny::runApp()
?withProgress
runApp()
runApp('test')
runApp()
library(plotly)
runApp()
runApp()
runApp()
runApp()
install.packages("dash")
install.packages("bio3d")
install.packages(c("fiery", "routr", "reqres", "htmltools", "base64enc", "plotly", "mime", "crayon", "devtools"))
install.packages(c("fiery", "routr", "reqres", "htmltools", "base64enc", "plotly", "mime", "crayon", "devtools"))
library(devtools)
# installs dashHtmlComponents, dashCoreComponents, and dashTable
# and will update the component libraries when a new package is released
install_github("plotly/dashR", upgrade = TRUE)
library(dash)
install_github("plotly/dash-bio", upgrade = TRUE)
install_github("plotly/dash-daq", upgrade = TRUE)
rna <- read.delim("~/Desktop/Expression_RNAseq_4.D.R_03_09_2015_Huimin.csv", skip = 1)
rna[1:5,1:5]
rna <- read.csv("~/Desktop/Expression_RNAseq_4.D.R_03_09_2015_Huimin.csv", skip = 1)
rna[1:5,1:5]
rna[1:5,15:20]
rna[1:5,21:25]
rna[1:5,25:30]
rna[1:5,29:35]
rna[1:5,29:37]
rna[1:5,29:36]
rna[1:5,20:28]
rna[1:5,21:28]
plotdat <- rna[grep("RAG1|RAG2"), 21:28]
plotdat <- rna[grep("RAG1|RAG2", rna$Gene), 21:28]
head(plotdat)
plotdat <- rna[grep("RAG1|RAG2", rna$Gene), c(2,21:28)]
head(plotdat)
plotdat <- rna[grep("RAG1|RAG2", rna$Gene), c(2,21:28)] %>% gather("cell_line","expr", -1)
library(tidyverse)
plotdat <- rna[grep("RAG1|RAG2", rna$Gene), c(2,21:28)] %>% gather("cell_line", "expr", -1)
head(plotdat)
ggplot(plotdat, aes(x = expr, fill = cell_line)) +
geom_density() +
facet_wrap(~gene)
ggplot(plotdat, aes(x = expr, fill = cell_line)) +
geom_density() +
facet_wrap(~Gene)
warnings()
str(plotdat)
ggplot(plotdat, aes(x = expr, fill = cell_line)) +
geom_density() +
facet_wrap(~Gene, ncol = 1)
head(rna[,21:28])
plotdat <- rna[, c(2,25:26)] %>% gather("cell_line", "expr", -1)
head(plotdat)
plotdat[grep("RAG", plotdat$Gene),]
ggplot(plotdat, aes(x = expr, fill = cell_line)) +
geom_density() +
geom_vline(xintercept = 55.34)
ggplot(plotdat, aes(x = log10(expr), fill = cell_line)) +
geom_density() +
geom_vline(xintercept = 55.34)
ggplot(plotdat, aes(x = log10(expr), fill = cell_line)) +
geom_density() +
geom_vline(xintercept = log10(55.34))
ggplot(plotdat, aes(x = log10(expr), fill = cell_line)) +
geom_density(alpha = .5) +
geom_vline(xintercept = log10(55.34))
ggplot(plotdat, aes(x = log10(expr), fill = cell_line)) +
geom_density(alpha = .5) +
geom_vline(xintercept = log10(55.34)) +
theme_bw(base_size = 16)
plotdat[grep("RAG", plotdat$Gene),]
plotdat[grep("RAG[12]", plotdat$Gene),]
ggplot(plotdat, aes(x = log10(expr), fill = cell_line)) +
geom_density(alpha = .5) +
geom_vline(xintercept = log10(732.53), col = "steelblue") + # RAG1 LAX7
geom_vline(xintercept = log10(1026.89), col = "firebrick") + # RAG1 LAX7R
geom_vline(xintercept = log10(55.34), col = "steelblue1") + # RAG2 LAX7
geom_vline(xintercept = log10(59.14), col = "firebrick") + # RAG2 LAX7R
scale_fill_manual(values = c("steelblue","firebrick")) +
theme_bw(base_size = 16)
ggplot(plotdat, aes(x = log10(expr), fill = cell_line)) +
geom_density(alpha = .5) +
geom_vline(xintercept = log10(732.53), col = "steelblue2") + # RAG1 LAX7
geom_vline(xintercept = log10(1026.89), col = "firebrick2") + # RAG1 LAX7R
geom_vline(xintercept = log10(55.34), col = "steelblue4") + # RAG2 LAX7
geom_vline(xintercept = log10(59.14), col = "firebrick4") + # RAG2 LAX7R
scale_fill_manual(values = c("steelblue","firebrick")) +
theme_bw(base_size = 16)
ggplot(plotdat, aes(x = log10(expr), fill = cell_line)) +
geom_density(alpha = .5) +
geom_vline(xintercept = log10(732.53), col = "steelblue2") + # RAG1 LAX7
geom_vline(xintercept = log10(1026.89), col = "firebrick2") + # RAG1 LAX7R
geom_vline(xintercept = log10(55.34), col = "steelblue4") + # RAG2 LAX7
geom_vline(xintercept = log10(59.14), col = "firebrick4") + # RAG2 LAX7R
scale_fill_manual(values = c("steelblue2","firebrick2")) +
theme_bw(base_size = 16)
quantile(plotdat, .9)
quantile(plotdat$expr, .9)
quantile(plotdat$expr, .1)
quantile(log(plotdat$expr), .1)
head(plotdat)
quantile(log(plotdat$expr+0.01), .1)
quantile(log(plotdat$expr+0.01), .9)
quantile(log(plotdat$expr+0.01), .95)
log10(732.53+0.01)
log10(732.53+0.1)
ggplot(plotdat, aes(x = log10(expr+0.1), fill = cell_line)) +
geom_density(alpha = .5) +
geom_vline(xintercept = log10(732.53), col = "steelblue2") + # RAG1 LAX7
geom_vline(xintercept = log10(1026.89), col = "firebrick2") + # RAG1 LAX7R
geom_vline(xintercept = log10(55.34), col = "steelblue4") + # RAG2 LAX7
geom_vline(xintercept = log10(59.14), col = "firebrick4") + # RAG2 LAX7R
scale_fill_manual(values = c("steelblue2","firebrick2")) +
theme_bw(base_size = 16)
ggplot(plotdat, aes(x = log10(expr), fill = cell_line)) +
geom_density(alpha = .5) +
geom_vline(xintercept = log10(732.53), col = "steelblue2") + # RAG1 LAX7
geom_vline(xintercept = log10(1026.89), col = "firebrick2") + # RAG1 LAX7R
geom_vline(xintercept = log10(55.34), col = "steelblue4") + # RAG2 LAX7
geom_vline(xintercept = log10(59.14), col = "firebrick4") + # RAG2 LAX7R
scale_fill_manual(values = c("steelblue2","firebrick2")) +
theme_bw(base_size = 16)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
viewer("https://rstudio.github.io/DT/shiny.html")
viewer <- getOption("viewer")
viewer("https://rstudio.github.io/DT/shiny.html")
utils::browseURL("viewer <- getOption("viewer")")
utils::browseURL("https://rstudio.github.io/DT/shiny.html")
runApp()
runApp()
runApp()
if (is.null(gpl_dat)) {
return()
} else {
gpl_pdat <- pData(gpl_dat)
# remove columns that have zero variance
useless_cols <- c("geo_accession","status","submission_date","last_update_date",
"type","channel_count","organism_ch1","molecule_ch1","extract_protocol_ch1",
"label_ch1","label_protocol_ch1", "taxid_ch1", "hyb_protocol", "scan_protocol",
"description", "data_processing", "platform_id","contact_name", "contact_email",
"contact_phone","contact_institute","contact_department","contact_address",
"contact_city","contact_zip/postal_code","contact_country", "contact_web_link",
"supplementary_file","data_row_count")
pdat_sel <- gpl_pdat[,!colnames(gpl_pdat) %in% useless_cols]
DT::datatable(
data = pdat_sel,
options = list(columnDefs = list(list(
targets = 1:ncol(pdat_sel),
render = JS(
"function(data, type, row, meta) {",
"return type === 'display' && data.length > 30 ?",
"'<span title=\"' + data + '\">' + data.substr(0, 30) + '...</span>' : data;",
"}")
))),
callback = JS('table.page(3).draw(false);'))
},
rownames = F,
})
runApp()
runApp()
DT::datatable(
data = pdat_sel,
options = list(columnDefs = list(list(
targets = 1:ncol(pdat_sel),
render = JS(
"function(data, type, row, meta) {",
"return type === 'display' && data.length > 30 ?",
"'<span title=\"' + data + '\">' + data.substr(0, 30) + '...</span>' : data;",
"}")
))),
callback = JS('table.page(3).draw(false);'),
rownames = FALSE, filter = NA)
runApp()
test <- getGEO("useless_cols <- apply(gpl_pdat, 2, function(x) length(unique(x)) == 1)
gpl_pdat <- gpl_pdat[,!useless_cols]
useless_cols <- colnames(gpl_pdat) %in% c("supplementary_file","data_row_count")
gpl_pdat <- gpl_pdat[,!useless_cols]")
test <- getGEO("GSE55976")
test
test$`GSE55976-GPL18389_series_matrix.txt.gz`
experimentData(test)
test <- test$`GSE55976-GPL18389_series_matrix.txt.gz`
experimentData(test)
experimentData(test)$summary
experimentData(test)[[1]]
experimentData(test)[1]
str(experimentData(test))
experimentData(test)@title
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gene <- "PON2"
probes <- rowData(se)[which(rowData(se)$symbol == gene),]
for (probe in rownames(probes)) {
coldat <- as.data.frame(colData(se))
coldat$expr <- ifelse(assay(se)[probe,] > median(assay(se)[probe,]), "High", "Low")
coldat$expr <- factor(coldat$expr, levels = c("Low", "High"))
tmpfit <- survfit(Surv(YEARS_TO_EVENT, censor_death_2) ~ expr, data = coldat)
tmppval <- surv_pvalue(tmpfit)
ggsurvplot(tmpfit, title = paste0("COG - ", gene, " expr: ", probe), pval = tmppval$pval.txt,
ylab = "OS probability", xlab = "Time [years]", censor = F,
font.size = 20, font.family = "Arial",
legend.title = "", legend.labs = c("Low","High"), legend = c(0.75, 0.3),
palette = c("forestgreen","firebrick"), axes.offset = F)
ggsave(paste0("COG_survival_PON2_expr_", probe, ".png"), width = 4.5, height = 3)
}
library(tidyverse)
library(SummarizedExperiment)
library(survival)
library(survminer)
options(stringsAsFactors = F)
# load data
pdat <- read.csv("COG_ALL_pdat_Zhang_2011.csv", check.names = F, row.names = 1)
colnames(pdat)[c(2:8)] <- c("GEO_accession", "age_days", "age_years", "congenital_abnormality", "sex", "race", "wbc")
expr <- read.csv("COG_ALL_expr_Zhang_2011.csv", check.names = F, row.names = 1)
fdat <- expr[,1:2]
rownames(fdat) <- rownames(expr)
colnames(fdat) <- c("refseq_txid", "symbol")
expr <- as.matrix(expr[,-c(1:2)])
expr <- expr[,match(rownames(pdat), colnames(expr))]
# edit pdat surv info
pdat$censor_death_2 <- ifelse(pdat$censor_death_1 == 1, 2, 1)
pdat$censor_relapse_2 <- ifelse(pdat$censor_relapse_1 == 1, 2, 1)
pdat$IKZF1_del <- ifelse(pdat$IKZF1.deletion == "Yes", "Y", "N")
pdat$IKZF1_del <- factor(pdat$IKZF1_del, levels = c("N","Y"))
pdat$MLL_STATUS <- factor(pdat$MLL_STATUS, levels = c("Negative","Positive"))
pdat$E2A_PBX1_STATUS <- factor(pdat$E2A_PBX1_STATUS, levels = c("Negative","Positive"))
pdat$TRISOMIES_4_10_STATUS <- factor(pdat$TRISOMIES_4_10_STATUS, levels = c("Negative","Positive"))
# make se
se <- SummarizedExperiment(assays = list("expr" = expr), rowData = fdat, colData = pdat)
# plot for each probe
gene <- "PON2"
probes <- rowData(se)[which(rowData(se)$symbol == gene),]
for (probe in rownames(probes)) {
coldat <- as.data.frame(colData(se))
coldat$expr <- ifelse(assay(se)[probe,] > median(assay(se)[probe,]), "High", "Low")
coldat$expr <- factor(coldat$expr, levels = c("Low", "High"))
tmpfit <- survfit(Surv(YEARS_TO_EVENT, censor_death_2) ~ expr, data = coldat)
tmppval <- surv_pvalue(tmpfit)
ggsurvplot(tmpfit, title = paste0("COG - ", gene, " expr: ", probe), pval = tmppval$pval.txt,
ylab = "OS probability", xlab = "Time [years]", censor = F,
font.size = 20, font.family = "Arial",
legend.title = "", legend.labs = c("Low","High"), legend = c(0.75, 0.3),
palette = c("forestgreen","firebrick"), axes.offset = F)
ggsave(paste0("COG_survival_PON2_expr_", probe, ".png"), width = 4.5, height = 3)
}
