variable = "total_features",
exprs_values = "exprs")
### RUVseq to remove batch effects
erccs <- fData(sce)$is_feature_control_ERCC
endog <- !fData(sce)$is_feature_control_ERCC
# ruvg
ruvg <- RUVg(counts(sce), erccs, k = 1)
set_exprs(sce, "ruvg1") <- ruvg$normalizedCounts
ruvg <- RUVg(counts(sce), erccs, k = 5)
set_exprs(sce, "ruvg5") <- ruvg$normalizedCounts
ruvg <- RUVg(counts(sce), erccs, k = 10)
set_exprs(sce, "ruvg10") <- ruvg$normalizedCounts
set_exprs(sce, "ruvg10_logcpm") <- log2(t(t(ruvg$normalizedCounts) /
colSums(ruvg$normalizedCounts)) + 1)
# ruvs
scIdx <- matrix(-1, ncol = max(table(sce$comb_cond)), nrow = 4)
tmp <- which(sce$comb_cond == "BLK_VEH")
scIdx[1, 1:length(tmp)] <- tmp
tmp <- which(sce$comb_cond == "BLK_DOX")
scIdx[2, 1:length(tmp)] <- tmp
tmp <- which(sce$comb_cond == "OCS_VEH")
scIdx[3, 1:length(tmp)] <- tmp
tmp <- which(sce$comb_cond == "OCS_DOX")
scIdx[4, 1:length(tmp)] <- tmp
cIdx <- rownames(sce)
for (k in c(1,5,10)) {
ruvs <- RUVs(counts(sce), cIdx, k = k,
scIdx = scIdx, isLog = FALSE)
set_exprs(sce, paste0("ruvs", k)) <- ruvs$normalizedCounts
set_exprs(sce, paste0("ruvs", k, "_logcpm")) <-
log2(t(t(ruvs$normalizedCounts) / colSums(ruvs$normalizedCounts)) + 1)
}
# examine correction
boxplot(
list(
"Raw counts" = calc_cell_RLE(counts(sce), erccs),
"RUVg (k = 1)" = calc_cell_RLE(assayData(sce)$ruvg1, erccs),
"RUVg (k = 5)" = calc_cell_RLE(assayData(sce)$ruvg5, erccs),
"RUVg (k = 10)" = calc_cell_RLE(assayData(sce)$ruvg10, erccs),
"RUVs (k = 1)" = calc_cell_RLE(assayData(sce)$ruvs1, erccs),
"RUVs (k = 5)" = calc_cell_RLE(assayData(sce)$ruvs5, erccs),
"RUVs (k = 10)" = calc_cell_RLE(assayData(sce)$ruvs10, erccs)
)
)
plotPCA(
sce[endog_genes, ],
colour_by = "comb_cond",
size_by = "total_features",
shape_by = "phase",
exprs_values = "exprs") +
ggtitle("PCA - un-corrected")
plotPCA(
sce[endog_genes, ],
colour_by = "comb_cond",
size_by = "total_features",
shape_by = "phase",
exprs_values = "ruvg10") +
ggtitle("PCA - RUVg k = 10")
plotPCA(
sce[endog_genes, ],
colour_by = "comb_cond",
size_by = "total_features",
shape_by = "phase",
exprs_values = "ruvs10_logcpm") +
ggtitle("PCA - RUVs k = 10 (logCPM)")
sce <- readRDS(paste0(outdir,"/lcastell_scater_sce.rds"))
# detect outliers
sce <- sce[, !sce$is_cell_control]
sce <- plotPCA(sce, pca_data_input = "pdata",
detect_outliers = TRUE, return_SCESet = TRUE)
# final cell filter to use
sce$use <- (!sce$outlier &
sce$total_features > 6000 &
sce$total_features < 15000 &
sce$pct_counts_feature_controls < 50 )
# plot qc
ggplot(data= pData(sce),
aes(x = total_features,
fill = use)) +
geom_histogram() + theme_bw(base_size = 18) +
scale_fill_manual(values = c("grey70", "grey10")) +
ggsave(paste0(outdir,"/plots/qc_total_features_hist.png"))
ggplot(data= pData(sce),
aes(x = total_counts,
fill = use)) +
geom_histogram() + theme_bw(base_size = 18) +
scale_fill_manual(values = c("grey70", "grey10")) +
ggsave(paste0(outdir,"/plots/qc_total_counts_hist.png"))
ggplot(data= pData(sce),
aes(x = pct_counts_feature_controls,
fill = use)) +
geom_histogram() + theme_bw(base_size = 18) +
scale_fill_manual(values = c("grey70", "grey10")) +
ggsave(paste0(outdir,"/plots/qc_pct_controls_hist.png"))
ggplot(data= pData(sce),
aes(x = pct_counts_top_100_features,
fill = use)) +
geom_histogram() + theme_bw(base_size = 18) +
scale_fill_manual(values = c("grey70", "grey10")) +
ggsave(paste0(outdir,"/plots/qc_pct_top100_hist.png"))
plotPhenoData(sce,
aes(x = total_features,
y = pct_counts_feature_controls,
colour = use,
shape = comb_cond,
size = total_features))  +
theme_bw(base_size = 16) +
ggsave(paste0(outdir,"/plots/qc_features_vs_pct_controls.png"))
# filter cells
sce <- sce[, sce$use]
# filter genes (expr in > 5% of cells)
keep_feature <- rowMeans(is_exprs(sce)) > 0.05
sce <- sce[keep_feature, ]
# final gene set
length(multi_ref <- grep(",", fData(sce)$ref_gene_ids))
length(no_ref <- grep("^$", fData(sce)$ref_gene_ids))
length(dup_ref <- which(duplicated(fData(sce)$ref_gene_ids)))
# gene sets for filtered set
geneTypes <- factor( c( ENSG="ENSG", ERCC="ERCC", LCAS="LCAS" )[
substr( rownames(counts(sce)), 1, 4 ) ] )
table(geneTypes)
ercc_genes <- which(geneTypes == "ERCC")
endog_genes <- which(!geneTypes == "ERCC")
# summary
ddply(pData(sce), .(comb_cond), summarize,
total_counts = mean(log10_total_counts),
total_features = mean(total_features),
pct_controls = mean(pct_exprs_feature_controls))
# scran norm
qclust <- scran::quickCluster(sce, min.size = 20)
sce <- scran::computeSumFactors(sce,
sizes = 10,
clusters = qclust)
sce <- scater::normalize(sce)
### assigning cell stage
# cc_markers <- readRDS(system.file("exdata",
#                                   "human_cycle_markers.rds",
#                                   package="scran"))
cc_assigned <- cyclone(sce, pairs = cc_markers)
sce$phase <- rep("S", ncol(sce))
sce$phase[cc_assigned$scores$G1 > 0.5] <- "G1"
sce$phase[cc_assigned$scores$G2M > 0.5] <- "G2M"
sce$phase[cc_assigned$scores$G1 > 0.5 &
cc_assigned$scores$G2M > 0.5] <- "unknown"
table(sce$phase)
# PCA/tSNE
plotPCA(sce[endog_genes, ],
ntop = 500,
colour_by = "comb_cond",
size_by = "total_features",
shape_by = "phase",
exprs_values = "exprs") +
theme_bw(base_size = 16) +
ggsave(paste0(outdir,"/plots/pca_scran_norm_cc_assigned.png"))
# checking confounding
plotQC(sce[endog_genes, ],
type = "find-pcs",
variable = "total_features",
exprs_values = "exprs")
### RUVseq to remove batch effects
erccs <- fData(sce)$is_feature_control_ERCC
endog <- !fData(sce)$is_feature_control_ERCC
# ruvg
ruvg <- RUVg(counts(sce), erccs, k = 1)
set_exprs(sce, "ruvg1") <- ruvg$normalizedCounts
ruvg <- RUVg(counts(sce), erccs, k = 5)
set_exprs(sce, "ruvg5") <- ruvg$normalizedCounts
ruvg <- RUVg(counts(sce), erccs, k = 10)
set_exprs(sce, "ruvg10") <- ruvg$normalizedCounts
set_exprs(sce, "ruvg10_logcpm") <- log2(t(t(ruvg$normalizedCounts) /
colSums(ruvg$normalizedCounts)) + 1)
# ruvs
scIdx <- matrix(-1, ncol = max(table(sce$comb_cond)), nrow = 4)
tmp <- which(sce$comb_cond == "BLK_VEH")
scIdx[1, 1:length(tmp)] <- tmp
tmp <- which(sce$comb_cond == "BLK_DOX")
scIdx[2, 1:length(tmp)] <- tmp
tmp <- which(sce$comb_cond == "OCS_VEH")
scIdx[3, 1:length(tmp)] <- tmp
tmp <- which(sce$comb_cond == "OCS_DOX")
scIdx[4, 1:length(tmp)] <- tmp
cIdx <- rownames(sce)
for (k in c(1,5,10)) {
ruvs <- RUVs(counts(sce), cIdx, k = k,
scIdx = scIdx, isLog = FALSE)
set_exprs(sce, paste0("ruvs", k)) <- ruvs$normalizedCounts
set_exprs(sce, paste0("ruvs", k, "_logcpm")) <-
log2(t(t(ruvs$normalizedCounts) / colSums(ruvs$normalizedCounts)) + 1)
}
# examine correction
boxplot(
list(
"Raw counts" = calc_cell_RLE(counts(sce), erccs),
"RUVg (k = 1)" = calc_cell_RLE(assayData(sce)$ruvg1, erccs),
"RUVg (k = 5)" = calc_cell_RLE(assayData(sce)$ruvg5, erccs),
"RUVg (k = 10)" = calc_cell_RLE(assayData(sce)$ruvg10, erccs),
"RUVs (k = 1)" = calc_cell_RLE(assayData(sce)$ruvs1, erccs),
"RUVs (k = 5)" = calc_cell_RLE(assayData(sce)$ruvs5, erccs),
"RUVs (k = 10)" = calc_cell_RLE(assayData(sce)$ruvs10, erccs)
)
)
plotPCA(
sce[endog_genes, ],
colour_by = "comb_cond",
size_by = "total_features",
shape_by = "phase",
exprs_values = "exprs") +
ggtitle("PCA - un-corrected")
plotPCA(
sce[endog_genes, ],
colour_by = "comb_cond",
size_by = "total_features",
shape_by = "phase",
exprs_values = "ruvg10") +
ggtitle("PCA - RUVg k = 10")
plotPCA(
sce[endog_genes, ],
colour_by = "comb_cond",
size_by = "total_features",
shape_by = "phase",
exprs_values = "ruvs10_logcpm") +
ggtitle("PCA - RUVs k = 10 (logCPM)")
sce_erccrm <- sce[!fData(sce)$is_feature_control_ERCC,]
sce_erccrm <- SC3::sc3_prepare(sce_erccrm)
sce_erccrm <- sc3_prepare(sce_erccrm)
sce_erccrm <- SC3::sc3_estimate_k(sce_erccrm)
library(SC3)
rm(list=ls())
calculateQCMetrics()
.rs.restartR()
calculateQCMetrics()
session()
sessionInfo()
detach_package(RUVSeq)
dplyr::ddply(pData(sce), .(comb_cond), summarize,
total_counts = mean(log10_total_counts),
total_features = mean(total_features),
pct_controls = mean(pct_exprs_feature_controls))
plyr::ddply(pData(sce), .(comb_cond), summarize,
total_counts = mean(log10_total_counts),
total_features = mean(total_features),
pct_controls = mean(pct_exprs_feature_controls))
shiny::runApp()
test <- getGEO("GSE82073")
test
pData(test)
test$GSE82073_series_matrix.txt.gz
pData(test$GSE82073_series_matrix.txt.gz)
fData(test)
fData(test$GSE82073_series_matrix.txt.gz)
test$GSE82073_series_matrix.txt.gz
exprs(test$GSE82073_series_matrix.txt.gz)
expr(test$GSE82073_series_matrix.txt.gz)
experimentData(test$GSE82073_series_matrix.txt.gz)
annotation(test$GSE82073_series_matrix.txt.gz)
Table(test$GSE82073_series_matrix.txt.gz)
GSMList(test$GSE82073_series_matrix.txt.gz)
GSMList(test$GSE82073_series_matrix.txt.gz)[[1]]
test <- getGEO("GSE82073", GSEMatrix = T)
test
test$GSE82073_series_matrix.txt.gz
getGEOSuppFiles("GSE82073")
suppl <- getGEOSuppFiles("GSE82073")
suppl
shiny::runApp()
runApp()
?exprs
runApp()
?type
runApp()
runApp()
runApp()
gse <- getGEO("GSE82073")
gpl <- gse$GSE82073_series_matrix.txt.gz
gpl
exprs(gpl)
counts
base <- "~/Desktop/Innes_GSE82073/"
files <- list.files(base, full.names = T)
names(files) <- sub(".+/(GSM[0-9]+)_.+$", "\\1", files)
for (i in seq_along(files)) {
file <- files[[i]]
data <- read.delim(file)
colnames(data)[3] <- names(files)[i]
if (i == 1) {
counts <- data
} else {
counts <- merge(counts, data, by = c("ENTREZID", "GENELENGTH"))
}
}
rownames(counts) <- counts[,1]
counts <- counts[,-c(1,2)]
base <- "~/Desktop/Innes_GSE82073/"
files <- list.files(base, full.names = T)
names(files) <- sub(".+/(GSM[0-9]+)_.+$", "\\1", files)
files
files <- list.files(base, pattern=".tsv", full.names = T)
names(files) <- sub(".+/(GSM[0-9]+)_.+$", "\\1", files)
files
for (i in seq_along(files)) {
file <- files[[i]]
data <- read.delim(file)
colnames(data)[3] <- names(files)[i]
if (i == 1) {
counts <- data
} else {
counts <- merge(counts, data, by = c("ENTREZID", "GENELENGTH"))
}
}
rownames(counts) <- counts[,1]
counts <- counts[,-c(1,2)]
counts(gpl)
exprs(gpl)
exprs(gpl) <- counts
?assayData()
assayData(gpl)
count_data <- read.delim(input$counts_file$datapath, row.names = 1)
counts
str(counts)
counts <- as.matrix(counts)
str(cunts)
str(counts)
assayData(gpl)
assayData(gpl) <- counts
?assayData
dim(assayData(gpl))
dim(counts(gpl))
dim(exprs(gpl))
exprs(gpl, matrix) <- counts
?exprs
class(counts)
exprs(gpl, counts) <- counts
exprs(gpl) <- counts
pData(gpl)
dim(pData(gpl))
dim(fData(gpl))
pd <- new("AnnotatedDataFrame", data=pData(gpl))
gpl_data <- gpl
count_data <- counts
pd <- new("AnnotatedDataFrame", data=pData(gpl_data))
fd <- bitr(rownames(count_data),
fromType = "ENTREZID",
toType = c("SYMBOL","ENSEMBL","REFSEQ",
"ACCNUM","UNIPROT"),
OrgDb = org_db)
shiny::runApp()
input <- list(org <- "hs")
gs_type <- "c3"
org <- ifelse(input$org == "hm", "human", "mouse")
org
input$org
input <- list(org = "hs")
input$org
org <- ifelse(input$org == "hm", "human", "mouse")
org
org <- ifelse(input$org == "hs", "human", "mouse")
org
gene_set <- load(paste0("~/Resources/Gene_sets/msigdb_",org,"/",
org,"_",gs_type,"v5p2.rdata"))
load(paste0("~/Resources/Gene_sets/msigdb_",org,"/",
org,"_",gs_type,"_v5p2.rdata"))
Hs.c3
?load
gene_set <- load(paste0("~/Resources/Gene_sets/msigdb_",org,"/",
org,"_",gs_type,"_v5p2.rdata"))
gene_set
str(gene_set)
gene_set
eval(parse(gene_set))
eval(parse(test = gene_set))
eval(parse(text = gene_set))
type(gene_set)
typeof(gene_set)
runApp()
input$org <- "Hs"
gs_type <- "H"
gs_type <- "H"
org <- ifelse(input$org == "Hs", "human", "mouse")
gene_set <- load(paste0("~/Resources/Gene_sets/msigdb_",org,"/",
org,"_",gs_type,"_v5p2.rdata"))
summaryTable <- data.frame("Set name" = names(eval(parse(text = gene_set))),
"N genes" = lengths(eval(parse(text = gene_set))))
summaryTable
runApp()
typeof(data_set)
typeof(gene_set)
if (typeof(gene_set) == "character") {
gene_set <- eval(parse(text = gene_set))
}
gene_set
summaryTable <- data.frame("Set name" = names(gene_set),
"N genes" = lengths(gene_set))
summaryTable
runApp()
rdata_files <- list.files(path = "~/Resources/Gene_sets", pattern = "*.rdata",
recursive = T, full.names = T)
rdata_files
sapply(rdata_files, function(x) load(x))
lapply(rdata_files, load, .GlobalEnv)
runApp()
gse <- getGEO("GSE42368")
gpl_data <- gse$GSE42368_series_matrix.txt.gz
exprs_mat <- exprs(gpl_data)
rownames(exprs_mat) <- fData(gpl_data)$"GENE SYMBOL"
head(exprs_mat)
head(fData(gpl_data))
Hs.c3$AAANWWTGC_UNKNOWN
read_gmt <- function(gmt_file) {
gene_set <- scan(gmt_file, what="", sep="\n")
gene_set <- strsplit(gene_set, "\\t+")
names(gene_set) <- sapply(gene_set, `[[`, 1)
gene_set <- lapply(gene_set, `[`, -c(1,2))
gene_set <- lapply(gene_set, function(x) { unique(x) })
return(gene_set)
}
senes <- read_gmt("~/Scripts/R/GSEA/AI_gene_sets.gmt")
senes
term_to_gene <- function(gene_set_list) {
term2genes <- data.frame(term = c(rep(names(gene_set_list), lengths(gene_set_list))),
gene = unlist(gene_set_list))
}
term2gene <- term_to_gene(Hs.c3)
head(term2gene)
tail(term2gene)
colnames(pData(gpl_data))
colnames(fData(gpl_data))
runApp()
gm_ratios <- function(exprs, idx_A, idx_B) {
apply(exprs, 1, function(x) {
exp(mean(log(x[idx_A]), na.rm = T)) / exp(mean(log(x[idx_B]), na.rm = T))
})
}
moo <- exprs(gpl_data)
head(moo)
idx_A <- c(1,2)
idx_B <- c(3,4)
test <- gm_ratios(moo, idx_A, idx_B)
warnings()
head(test)
test_df <- data.frame(moo[,1:4], gm = test)
head(test_df)
head(test_df[is.na(test_df$gm),])
gm_ratios <- function(exprs, idx_A, idx_B) {
exprs <- exprs + min(exprs)
apply(exprs, 1, function(x) {
exp(mean(log(x[idx_A]), na.rm = T)) / exp(mean(log(x[idx_B]), na.rm = T))
})
}
test_df$gm <- gm_ratios(moo, idx_A, idx_B)
warnings(0)
warnings()
head(test-df)
head(test_df)
head(moo)
moo
moo[1:5,1:5]
moo2 <- moo+min(moo)
moo2[1:5,1:5]
test_df$gm <- gm_ratios(moo, idx_A, idx_B)
gm_ratios <- function(exprs, idx_A, idx_B) {
exprs <- exprs + abs(min(exprs))
apply(exprs, 1, function(x) {
exp(mean(log(x[idx_A]), na.rm = T)) / exp(mean(log(x[idx_B]), na.rm = T))
})
}
test_df$gm <- gm_ratios(moo, idx_A, idx_B)
head(test_df$gm)
head(test_df)
moo3 <- test_df
gm_ratios <- function(exprs, idx_A, idx_B) {
#exprs <- exprs + abs(min(exprs))
apply(exprs, 1, function(x) {
exp(mean(log(x[idx_A]), na.rm = T)) / exp(mean(log(x[idx_B]), na.rm = T))
})
}
test_df$gm <- gm_ratios(moo, idx_A, idx_B)
head(test_df)
head(moo3)
runApp()
exprs_mat <- exprs(gpl_data)
rownames(exprs_mat) <- fData(gpl_data)$"Entrez_Gene_ID"
gm_values <- gm_ratios(exprs_mat, numer_idx, denom_idx)
numer_idx <- c(1,2)
denom_idx <- c(3,4)
gm_values <- gm_ratios(exprs_mat, numer_idx, denom_idx)
head(gm_values)
warnings()
# function for calc ratio of geometric means
gm_ratios <- function(exprs, idx_A, idx_B) {
exprs <- exprs + abs(min(exprs))
apply(exprs, 1, function(x) {
exp(mean(log(x[idx_A]), na.rm = T)) / exp(mean(log(x[idx_B]), na.rm = T))
})
}
gm_values <- gm_ratios(exprs_mat, numer_idx, denom_idx)
gsea_res <- GSEA(gm_values, TERM2GENE = gene_sets,
minGSSize = 10, pvalueCutoff = 0.1)
gene_sets <- term_to_gene(Hs.c3)
gsea_res <- GSEA(gm_values, TERM2GENE = gene_sets,
minGSSize = 10, pvalueCutoff = 0.1)
gm_values <- gm_values[order(-gm_values)]
gsea_res <- GSEA(gm_values, TERM2GENE = gene_sets,
minGSSize = 10, pvalueCutoff = 0.1)
chosen_gene_set <- gsea_res$ID[1]
gseaplot(gsea_res, geneSetID = chosen_gene_set)
length(gm_values)
head(gsea_res)
runApp()
install.packages(c("ggvis", "heatmap3"))
shiny::runApp()
runApp()
runApp('/srv/shiny-server/sample-apps/hello')
